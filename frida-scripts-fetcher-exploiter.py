import argparse
import subprocess
import requests
import re
from concurrent.futures import ThreadPoolExecutor
from bs4 import BeautifulSoup
from urllib.parse import urlparse

def fetch_scripts(page):
    url = f"https://codeshare.frida.re/browse?page={page}"
    response = requests.get(url)
    html = response.text
    h2_tags = re.findall(r'<h2>(.*?)</h2>', html, flags=re.IGNORECASE)
    return h2_tags

def fetch_response(url):
    try:
        response = requests.get(url)
        return response.text
    except:
        return None

def search_scripts(keyword, end_page):
    try:
        urls = []
        print(f"[+] Extracting all the scripts with the word '{keyword}' in their names.")
        print()
        with ThreadPoolExecutor(max_workers=5) as executor:
            futures = []
            for i in range(1, end_page + 1):
                futures.append(executor.submit(fetch_scripts, i))

            for future in futures:
                h2_tags = future.result()
                keyword_scripts = [h2 for h2 in h2_tags if re.search(keyword, h2, flags=re.IGNORECASE)]
                for script in keyword_scripts:
                    print(script)
                    match = re.search(r'href="(.*?)"', script)
                    if match:
                        urls.append(match.group(1))
        
        print("\nExecuting 'frida-ps -Ua' command:")
        frida_ps_output = subprocess.check_output(['frida-ps', '-Ua'], universal_newlines=True)
        print(frida_ps_output)
        binary_input = input("\nEnter your binary: ")

        print("\nExtracted URLs:")
        for url in urls:
            modified_url = re.sub(r'^https://codeshare.frida.re/@', 'frida -U --codeshare ', url)
            modified_url = re.sub(r'/$', f' -f {binary_input}', modified_url)
            print(modified_url)
            
            subprocess.run(modified_url, shell=True)

    except KeyboardInterrupt:
        print("\nTerminated by user.")
        exit(0)

def main():
    parser = argparse.ArgumentParser(description='Frida Scripts Fetcher')
    parser.add_argument('-s', '--search', metavar='keyword', type=str, help='Search keyword')
    parser.add_argument('-p', '--pages', metavar='end_page', type=int, default=25, help='End page')
    args = parser.parse_args()

    if args.search:
        search_scripts(args.search, args.pages)
    else:
        parser.print_help()

    print("\nFollow Me On Twitter @DarkLotusKDB")
    print("Happy Hacking")

if __name__ == '__main__':
    main()
